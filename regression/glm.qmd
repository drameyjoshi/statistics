---
title: "Logistic Regression"
author: "Amey Joshi"
format: html
editor: visual
---

# Logistic Regression

## Ravens Data

```{r}
path <- './datasets/ravensData.rda'
load(path)

head(ravensData)
```

The variables of interest are `ravenWinNum`, `ravenScore` and `opponentScore`. Does it ever happen that the Raven team won when its score was less than or equal to its opponent?

```{r}
ravensData[(ravensData$ravenWinNum == 1) &
             (ravensData$ravenScore <= ravensData$opponentScore), ]
```

There are none and this should not be any surprise. If we know the scores of both the teams we can confidently tell who won. We are interested in building a model that predicts if Raven wins knowing its score alone.

## Logistic regression model

We use the function `glm` to fit a logistic regression model. The link function here is `logit` and the family of outcome is `binomial`.

```{r}
res <- with(ravensData, glm(ravenWinNum ~ ravenScore, family = 'binomial'))
summary(res)
```

We check how good the model is by plotting its prediction with the data.

```{r}
plot(
  ravensData$ravenScore,
  res$fitted.values,
  pch = 16,
  col = 'blue',
  xlab = 'Score',
  ylab = 'Probability of winning',
  main = 'Logistic regression'
)
```

# Poisson regression

## Counts data

```{r}
pathname <- './datasets/gadata.csv'
ga <- read.csv(pathname)
head(ga)
```

We are interested in estimating the number of visits on a day. As usual, we first plot the data.

```{r}
with(ga,
     plot(
       julian,
       visits,
       pch = 16,
       xlab = 'Julian date',
       ylab = '# visits',
       cex = 0.5
     ))
```

We will first fit a linear model.

```{r}
lm.res <- lm(visits ~ julian, data = ga)
summary(lm.res)
plot(ga$julian,
     ga$visits,
     pch = 16,
     xlab = 'Julian date',
     ylab = '# visits',
     cex = 0.5)

abline(lm.res$coefficients, col = 'red')
```

The fit is not bad but the model has at least two deficiencies:

1.  The errors are Gaussian. This may not be true when the counts are small and the Poisson distribution is not like the normal.
2.  The response must be non-negative but the model does not enforce it.

We try to address them by using a generalised linear model with `poisson` family.

```{r}
glm.res <- glm(visits ~ julian, family = 'poisson', data = ga)
plot(ga$julian,
     ga$visits,
     pch = 16,
     xlab = 'Julian date',
     ylab = '# visits',
     main = 'Visits to a website',
     cex = 0.5,
     col = 'salmon')

abline(lm.res$coefficients, col = 'black', lwd = 2)
lines(ga$julian, glm.res$fitted, col = 'blue', lwd = 2)
legend(x = 'topleft',
       legend = c('linear', 'poisson'),
       col = c('black', 'blue'),
       lwd = c(2, 2),
       bty = 'n')
```
