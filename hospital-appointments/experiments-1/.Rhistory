diagnose_cm(cm)
print(paste(rep('*', 80), collapse=""))
cm
}
results <- c()
for (m in models) {
resutls <- c(try_glm(m), results)
}
glm(Outcome ~ Age.Grp + SMS_received + Gap.Grp, data = trn.data, family=binomial)
results <- glm(Outcome ~ Age.Grp + SMS_received + Gap.Grp, data = trn.data, family=binomial)
summary(results)
library(glmnet)
rm(list=ls())
?glmnet
data <- read.csv('model_data.csv')
set.seed(15081947)
N <- nrow(data)
trn.samples <- sample.int(N, N * 0.7)
trn.data <- data[trn.samples, ]
tst.data <- data[-trn.samples, ]
colnames(data)
all.Xs <- colnames(data)[1:6, 7:10]
all.Xs <- colnames(data)[c(1:6, 7:10)]
all.Xs
all.Xs <- colnames(data)[c(1:6, 8:10)]
all.Xs
model.1 <- all.Xs[c(4, 6:9)]
model.1
X <- trn.data[, model.1]
y <- trn.data[, 'Outcome']
result.1 <- glmnet(x=X, y=y, family = "binomial")
result.1 <- glmnet(X, y, family = "binomial")
result.1 <- glmnet(as.matrix(X), y, family = "binomial")
summary(result.1)
coef(result.1)
plot(model.1)
print(model.1)
plot(result.1)
print(result.1)
coef(result.1, s=0.000222)
plot(result.1, xvar='dev', label = TRUE)
?cv.glmnet
110526/13
cv.1 <- cv.glmnet(as.matrix(data[, model.1]), data[, 'Outcome'], K=13) # 13 is a factor of 110526
cv.1 <- cv.glmnet(as.matrix(data[, model.1]), data[, 'Outcome'], nfolds = 13) # 13 is a factor of 110526
cv.1$lambda
cv.1$cvm
cv.1$glmnet.fit
cv.1$lambda.min
coef(cv.1$glmnet.fit, s=0.000814)
# The coefficients of the model with least lambda are:
coef(cv.1$glmnet.fit, s = cv.1$lambda.min)
# 6 x 1 sparse Matrix of class "dgCMatrix"
# 1
# (Intercept)   0.223748136
# SMS_received  0.019591434
# VisitNum     -0.048825303
# CumNoShow     0.329623732
# Age.Grp      -0.004292481
# Gap.Grp       0.040077374
print(paste("Mean cross-validated error:", cv.1$cvm))
cv.1$cvm
cv.1$cvm[-1]
(cv.1$cvm)[-1]
type(cv.1$cvm)
class(cv.1$cvm)
cv.1$cvm[1]
cv.1$cvm[length(cv.1$cvm)]
# 6 x 1 sparse Matrix of class "dgCMatrix"
# 1
# (Intercept)   0.223748136
# SMS_received  0.019591434
# VisitNum     -0.048825303
# CumNoShow     0.329623732
# Age.Grp      -0.004292481
# Gap.Grp       0.040077374
print(paste("Mean cross-validated error:", cv.1$cvm[length(cv.1$cvm)]))
plot(cv.1)
exp(-7)
cv.1$lambda.min
exp(-7.2)
exp(-7.1)
colnames(data)
?combn
combn(colnames(data), 2)
combn(colnames(data), 2)[1]
combn(colnames(data), 2)[,1]
head(data[, combn(colnames(data), 2)[,1]])
head(data)
X <- combn(colnames(data), 2)[,1]
X <- combn(colnames(data), 2)
dim(X)
dim(X)[2]
X[, 1]
length(colnames(data))
colnames(data)
rm(list=ls())
library(glmnet)
data <- read.csv('model_data.csv')
set.seed(15081947)
n.Xs <- length(colnames(data)) - 1
x.list <- character(2^n.Xs)
cv.err.list <- numeric(2^n.Xs)
i <- 1
for (n in ncol(data)) {
sets <- combn(colnames, n)
for (s in dim(sets)[2]) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- Xs
cv.err.list[i] <- cv.results$lambda.min
}
}
for (n in n.Xs) { print(n)}
for (n in 1>>n.Xs) { print(n)}
for (n in 1..n.Xs) { print(n)}
for (n in seq(1, n.Xs)) { print(n)}
for (n in seq(1, n.Xs)) {
sets <- combn(colnames, n)
for (s in dim(sets)[2]) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- Xs
cv.err.list[i] <- cv.results$lambda.min
i <- i + 1
}
}
i <- 1
for (n in seq(1, n.Xs)) {
browser()
sets <- combn(colnames, n)
for (s in dim(sets)[2]) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- Xs
cv.err.list[i] <- cv.results$lambda.min
i <- i + 1
}
}
all.Xs <- colnames(data)[c(1:6, 8:10)]
i <- 1
for (n in seq(1, n.Xs)) {
sets <- combn(all.Xs, n)
for (s in dim(sets)[2]) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- Xs
cv.err.list[i] <- cv.results$lambda.min
i <- i + 1
}
}
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
for (s in dim(sets)[2]) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- Xs
cv.err.list[i] <- cv.results$lambda.min
i <- i + 1
}
}
which.min(cv.err.list)
x.list[9]
x.list
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
for (s in dim(sets)[2]) {
Xs <- sets[, s]
print(Xs)
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
for (s in dim(sets)[1]) {
Xs <- sets[, s]
print(Xs)
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
for (s in dim(sets)[1]) {
Xs <- sets[s, ]
print(Xs)
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
i <- 1
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
browser()
for (s in dim(sets)[1]) {
Xs <- sets[s, ]
print(Xs)
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
dim(sets)
dim(sets)[2]
sets[, 4]
head(data[, sets[, 4]])
q
q
quit
help
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
# browser()
for (s in dim(sets)[2]) {
Xs <- sets[s, ]
print(Xs)
print()
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
# browser()
for (s in dim(sets)[2]) {
Xs <- sets[, s]
print(Xs)
print()
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
print()
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
# browser()
for (s in dim(sets)[2]) {
Xs <- sets[, s]
print(Xs)
print("\n")
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
# browser()
for (s in seq(1, dim(sets)[2])) {
Xs <- sets[, s]
print(Xs)
print("\n")
# cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
# x.list[i] <- Xs
# cv.err.list[i] <- cv.results$lambda.min
# i <- i + 1
}
}
i <- 1
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
for (s in seq(1, dim(sets)[2])) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- Xs
cv.err.list[i] <- cv.results$lambda.min
i <- i + 1
}
}
cv.err.list
rm(list=ls())
source('~/drive/snippets/toptal/experiments-1/glmnet-2.R')
warnings()
least.cv.error <- min(cv.err.list)
Xs.least.cv.error <- Xs[which.min(cv.err.list)]
least.cv.error <- min(cv.err.list[cv.err.list > 0])
Xs.least.cv.error <- Xs[which.min(cv.err.list[cv.err.list > 0])]
which.min(cv.err.list[cv.err.list > 0])
Xs[2]
Xs.least.cv.error <- x.list[which.min(cv.err.list[cv.err.list > 0])]
x.list[1:10]
x.list
i <- 1
for (n in seq(2, n.Xs)) {
browser()
sets <- combn(all.Xs, n)
for (s in seq(1, dim(sets)[2])) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- Xs
cv.err.list[i] <- cv.results$lambda.min
i <- i + 1
print(paste("Subset: ", i))
}
}
Xs
x.list[1]
x.list[1] <- Xs
x.list[1] <- paste(Xs, collapse=",")
x.list[1]
min(cv.err.list)
which.min(cv.err.list)
summary(cv.err.list)
x.list[503]
x.list[504]
x.list[490:]
x.list[490:512]
combn(all.Xs, n.Xs)
sets <- combn(all.Xs, n.Xs)
dim(sets)
dim(sets)[2]
Xs <- sets[, 1]
for (s in seq(1, dim(sets)[2])) print(sets[, s])
source('~/drive/snippets/toptal/experiments-1/glmnet-2.R')
least.cv.error <- min(cv.err.list[cv.err.list > 0])
Xs.least.cv.error <- x.list[which.min(cv.err.list[cv.err.list > 0])]
set.seed(15081947)
N <- nrow(data)
diagnose_cm <- function(cm) {
# Compute the standard metrics from a confusion matrix.
err_rate <- (cm[1, 2] + cm[2, 1])/sum(cm)
precision <- cm[2, 2]/(cm[2, 2] + cm[2, 1]) # TP/(TP + FP)
recall <- cm[2, 2]/(cm[2, 2] + cm[1, 2])    # TP/(TP + FN)
f1.score <- 2*precision*recall/(precision + recall)
print(paste('Error rate =', round(err_rate * 100, 3), "%."))
print(paste('Precision =', round(precision * 100, 3), "%."))
print(paste('Recall =', round(recall * 100, 3), "%."))
print(paste('F1-score =', round(f1.score * 100, 3), "%."))
}
trn.samples <- sample.int(N, N * 0.7)
trn.data <- data[trn.samples, ]
tst.data <- data[-trn.samples, ]
model.2 <- 'Outcome ~ Age.Grp'
glm.2 <- glm(as.formula(model.2),
data = trn.data,
family = binomial)
summary(glm.2)
glm.2.prob <- predict(glm.2, type = 'response')
glm.2.pred <- rep(0, length(glm.2.prob))
glm.2.pred[glm.2.prob > 0.5] <- 1
cm <- table(glm.2.pred, trn.data$Outcome)
diagnose_cm(cm)
cm
summary(cv.err.list)
summary(cv.err.list[cv.err.list > 0])
hist(cv.err.list[cv.err.list > 0])
all.cv.results <- data.frame("x.list" = x.list[1:503], "cv.err" = cv.err.list)
all.cv.results <- data.frame("x.list" = x.list[1:503], "cv.err" = cv.err.list[1:503])
all.cv.results <- all.cv.results[order(cv.err)]
all.cv.results <- all.cv.results[order(all.cv.results$cv.err)]
all.cv.results <- all.cv.results[order(all.cv.results$cv.err), ]
View(all.cv.results)
all.Xs
colnames(data)
all.Xs <- colnames(data)[c(2:4, 6, 8:10)]
x.list
source('~/drive/snippets/toptal/experiments-1/glmnet-2.R')
least.cv.error <- min(cv.err.list[cv.err.list > 0])
Xs.least.cv.error <- x.list[which.min(cv.err.list[cv.err.list > 0])]
library(glmnet)
data <- read.csv('model_data.csv')
set.seed(15081947)
all.Xs <- colnames(data)[c(2:4, 6, 8:10)]
n.Xs <- length(all.Xs)
# We do not consider singleton sets and the empty set.
x.list <- character(2^n.Xs - n.Xs - 1)
cv.err.list <- numeric(2^n.Xs - n.Xs - 1)
i <- 1
for (n in seq(2, n.Xs)) {
sets <- combn(all.Xs, n)
for (s in seq(1, dim(sets)[2])) {
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13)
x.list[i] <- paste(Xs, collapse = ", ")
cv.err.list[i] <- cv.results$lambda.min
print(paste("Subset:", i, x.list[i]))
i <- i + 1
}
}
least.cv.error <- min(cv.err.list[cv.err.list > 0])
Xs.least.cv.error <- x.list[which.min(cv.err.list[cv.err.list > 0])]
#
all.cv.results <- data.frame("x.list" = x.list[1:503], "cv.err" = cv.err.list[1:503])
all.cv.results <- all.cv.results[order(all.cv.results$cv.err), ]
source('~/drive/snippets/toptal/experiments-1/glmnet-1.R')
model.1
all.Xs
source('~/drive/snippets/toptal/experiments-1/glmnet-1.R')
source('~/drive/snippets/toptal/experiments-1/glmnet-2.R')
least.cv.error <- min(cv.err.list)
Xs.least.cv.error <- x.list[which.min(cv.err.list)]
#
all.cv.results <- data.frame("x.list" = x.list[1:503], "cv.err" = cv.err.list[1:503])
all.cv.results <- all.cv.results[order(all.cv.results$cv.err), ]
write.csv(all.cv.results, 'cv_glmnet_results.csv')
View(all.cv.results)
all.Xs
trn.samples <- sample.int(N, N * 0.7)
trn.data <- data[trn.samples, ]
tst.data <- data[-trn.samples, ]
all.Xs <- colnames(data)[c(2:4, 6, 8:10)]
model.1 <- all.Xs
X <- trn.data[, model.1]
y <- trn.data[, 'Outcome']
result.1 <- glmnet(as.matrix(X), y, family = "binomial")
cv.1 <- cv.glmnet(as.matrix(data[, model.1]), data[, 'Outcome'], nfolds = 13) # 13 is a factor of 110526
plot(cv.1)
# The coefficients of the model with least lambda are:
coef(cv.1$glmnet.fit, s = cv.1$lambda.min)
# 6 x 1 sparse Matrix of class "dgCMatrix"
# 1
# (Intercept)   0.223748136
# SMS_received  0.019591434
# VisitNum     -0.048825303
# CumNoShow     0.329623732
# Age.Grp      -0.004292481
# Gap.Grp       0.040077374
print(paste("Mean cross-validated error:", cv.1$cvm[length(cv.1$cvm)]))
cv.1 <- cv.glmnet(as.matrix(data[, model.1]), data[, 'Outcome'], nfolds = 13, family = "binomial") # 13 is a factor of 110526
plot(cv.1)
# The coefficients of the model with least lambda are:
coef(cv.1$glmnet.fit, s = cv.1$lambda.min)
# 6 x 1 sparse Matrix of class "dgCMatrix"
# 1
# (Intercept)   0.223748136
# SMS_received  0.019591434
# VisitNum     -0.048825303
# CumNoShow     0.329623732
# Age.Grp      -0.004292481
# Gap.Grp       0.040077374
print(paste("Mean cross-validated error:", cv.1$cvm[length(cv.1$cvm)]))
Sys.time()
s1 <- Sys.time()
s2 <- Sys.time()
s2 - s1
n <- 6
sets <- combn(all.Xs, n)
s <- 1
Xs <- sets[, s]
cv.results <- cv.glmnet(as.matrix(data[, Xs]), data[, 'Outcome'], nfolds = 13, family = "binomial")
cv.err.list[i] <- cv.results$cvm[length(cv.results$cvm)]
i
cv.err.list[i]
library(glmnet)
?glmnet
data <- read.csv('model_data.csv')
set.seed(15081947)
N <- nrow(data)
trn.samples <- sample.int(N, N * 0.7)
trn.data <- data[trn.samples, ]
tst.data <- data[-trn.samples, ]
all.Xs <- colnames(data)[c(2:4, 6, 8:10)]
model.1 <- all.Xs
X <- trn.data[, model.1]
y <- trn.data[, 'Outcome']
result.1 <- glmnet(as.matrix(X), y, family = "binomial", alpha = 1)
cv.1 <- cv.glmnet(as.matrix(data[, model.1]), data[, 'Outcome'], nfolds = 13, family = "binomial", alpha = 1) # 13 is a factor of 110526
plot(cv.1)
# The coefficients of the model with least lambda are:
coef(cv.1$glmnet.fit, s = cv.1$lambda.min)
# 6 x 1 sparse Matrix of class "dgCMatrix"
# 1
# (Intercept)   0.223748136
# SMS_received  0.019591434
# VisitNum     -0.048825303
# CumNoShow     0.329623732
# Age.Grp      -0.004292481
# Gap.Grp       0.040077374
print(paste("Mean cross-validated error:", cv.1$cvm[length(cv.1$cvm)]))
all.Xs
model.1 <- all.Xs[c(2:5, 7)]
X <- trn.data[, model.1]
y <- trn.data[, 'Outcome']
result.1 <- glmnet(as.matrix(X), y, family = "binomial", alpha = 1)
cv.1 <- cv.glmnet(as.matrix(data[, model.1]), data[, 'Outcome'], nfolds = 13, family = "binomial", alpha = 1) # 13 is a factor of 110526
plot(cv.1)
# The coefficients of the model with least lambda are:
coef(cv.1$glmnet.fit, s = cv.1$lambda.min)
# 6 x 1 sparse Matrix of class "dgCMatrix"
# 1
# (Intercept)   0.223748136
# SMS_received  0.019591434
# VisitNum     -0.048825303
# CumNoShow     0.329623732
# Age.Grp      -0.004292481
# Gap.Grp       0.040077374
print(paste("Mean cross-validated error:", cv.1$cvm[length(cv.1$cvm)]))
?lengths
lengths("as, rf. ty")
lengths("as, rf, ty")
s <- "as, rf, vt"
sapply(strsplit(s, ","), length)
all.cv.results <- read.csv("cv_glmnet_results.csv")
all.cv.results$nvars <- sapply(strsplit(all.cv.results$x.list, ","), length)
View(all.cv.results)
colnames(all.cv.results)[1] <- "row.num"
write.csv(all.cv.results, 'cv_glmnet_results.csv')
?write.csv
write.csv(all.cv.results, 'cv_glmnet_results.csv', row.names = FALSE)
